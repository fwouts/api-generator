// Generated from src/grammar/ApiDef.g4 by ANTLR 4.6-SNAPSHOT

import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

export class ApiDefLexer extends Lexer {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly T__2 = 3;
  public static readonly T__3 = 4;
  public static readonly T__4 = 5;
  public static readonly T__5 = 6;
  public static readonly T__6 = 7;
  public static readonly T__7 = 8;
  public static readonly T__8 = 9;
  public static readonly T__9 = 10;
  public static readonly T__10 = 11;
  public static readonly T__11 = 12;
  public static readonly T__12 = 13;
  public static readonly T__13 = 14;
  public static readonly T__14 = 15;
  public static readonly T__15 = 16;
  public static readonly T__16 = 17;
  public static readonly T__17 = 18;
  public static readonly T__18 = 19;
  public static readonly T__19 = 20;
  public static readonly T__20 = 21;
  public static readonly T__21 = 22;
  public static readonly T__22 = 23;
  public static readonly NAME = 24;
  public static readonly NUMBER = 25;
  public static readonly LINEBREAK = 26;
  public static readonly WHITESPACE = 27;
  public static readonly BLOCK_COMMENT = 28;
  public static readonly LINE_COMMENT = 29;
  public static readonly modeNames: string[] = ["DEFAULT_MODE"];

  public static readonly ruleNames: string[] = [
    "T__0",
    "T__1",
    "T__2",
    "T__3",
    "T__4",
    "T__5",
    "T__6",
    "T__7",
    "T__8",
    "T__9",
    "T__10",
    "T__11",
    "T__12",
    "T__13",
    "T__14",
    "T__15",
    "T__16",
    "T__17",
    "T__18",
    "T__19",
    "T__20",
    "T__21",
    "T__22",
    "NAME",
    "NUMBER",
    "LINEBREAK",
    "WHITESPACE",
    "BLOCK_COMMENT",
    "LINE_COMMENT",
  ];

  private static readonly _LITERAL_NAMES: (string | undefined)[] = [
    undefined,
    "'endpoint'",
    "':'",
    "'@headers'",
    "'('",
    "')'",
    "'->'",
    "'GET'",
    "'POST'",
    "'PUT'",
    "'DELETE'",
    "'/'",
    "'type'",
    "'='",
    "'|'",
    "'[]'",
    "'Array<'",
    "'>'",
    "'Map<'",
    "'{'",
    "'}'",
    "'?'",
    "'@'",
    "';'",
  ];
  private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "NAME",
    "NUMBER",
    "LINEBREAK",
    "WHITESPACE",
    "BLOCK_COMMENT",
    "LINE_COMMENT",
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    ApiDefLexer._LITERAL_NAMES,
    ApiDefLexer._SYMBOLIC_NAMES,
    [],
  );

  @Override
  @NotNull
  public get vocabulary(): Vocabulary {
    return ApiDefLexer.VOCABULARY;
  }

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(ApiDefLexer._ATN, this);
  }

  @Override
  public get grammarFileName(): string {
    return "ApiDef.g4";
  }

  @Override
  public get ruleNames(): string[] {
    return ApiDefLexer.ruleNames;
  }

  @Override
  public get serializedATN(): string {
    return ApiDefLexer._serializedATN;
  }

  @Override
  public get modeNames(): string[] {
    return ApiDefLexer.modeNames;
  }

  public static readonly _serializedATN: string = "\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x1F\xC0\b\x01" +
  "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
  "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
  "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
  "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
  "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
  "\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
  "\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04" +
  "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06" +
  "\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03" +
  "\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
  "\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
  "\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
  "\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
  "\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03" +
  "\x18\x03\x18\x03\x19\x03\x19\x07\x19\x95\n\x19\f\x19\x0E\x19\x98\v\x19" +
  "\x03\x1A\x06\x1A\x9B\n\x1A\r\x1A\x0E\x1A\x9C\x03\x1B\x03\x1B\x03\x1C\x06" +
  "\x1C\xA2\n\x1C\r\x1C\x0E\x1C\xA3\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D" +
  "\x03\x1D\x07\x1D\xAC\n\x1D\f\x1D\x0E\x1D\xAF\v\x1D\x03\x1D\x03\x1D\x03" +
  "\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\xBA\n\x1E" +
  "\f\x1E\x0E\x1E\xBD\v\x1E\x03\x1E\x03\x1E\x03\xAD\x02\x02\x1F\x03\x02\x03" +
  "\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02" +
  "\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F" +
  "\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18" +
  "/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F\x03\x02" +
  "\x07\x04\x02C\\c|\x06\x022;C\\aac|\x03\x022;\x04\x02\f\f\x0F\x0F\x05\x02" +
  '\v\v\x0E\x0E""\xC4\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02' +
  "\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r" +
  "\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13" +
  "\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19" +
  "\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F" +
  "\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02" +
  "\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02" +
  "\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03" +
  "\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02" +
  "\x02\x02;\x03\x02\x02\x02\x03=\x03\x02\x02\x02\x05F\x03\x02\x02\x02\x07" +
  "H\x03\x02\x02\x02\tQ\x03\x02\x02\x02\vS\x03\x02\x02\x02\rU\x03\x02\x02" +
  "\x02\x0FX\x03\x02\x02\x02\x11\\\x03\x02\x02\x02\x13a\x03\x02\x02\x02\x15" +
  "e\x03\x02\x02\x02\x17l\x03\x02\x02\x02\x19n\x03\x02\x02\x02\x1Bs\x03\x02" +
  "\x02\x02\x1Du\x03\x02\x02\x02\x1Fw\x03\x02\x02\x02!z\x03\x02\x02\x02#" +
  "\x81\x03\x02\x02\x02%\x83\x03\x02\x02\x02'\x88\x03\x02\x02\x02)\x8A\x03" +
  "\x02\x02\x02+\x8C\x03\x02\x02\x02-\x8E\x03\x02\x02\x02/\x90\x03\x02\x02" +
  "\x021\x92\x03\x02\x02\x023\x9A\x03\x02\x02\x025\x9E\x03\x02\x02\x027\xA1" +
  "\x03\x02\x02\x029\xA7\x03\x02\x02\x02;\xB5\x03\x02\x02\x02=>\x07g\x02" +
  "\x02>?\x07p\x02\x02?@\x07f\x02\x02@A\x07r\x02\x02AB\x07q\x02\x02BC\x07" +
  "k\x02\x02CD\x07p\x02\x02DE\x07v\x02\x02E\x04\x03\x02\x02\x02FG\x07<\x02" +
  "\x02G\x06\x03\x02\x02\x02HI\x07B\x02\x02IJ\x07j\x02\x02JK\x07g\x02\x02" +
  "KL\x07c\x02\x02LM\x07f\x02\x02MN\x07g\x02\x02NO\x07t\x02\x02OP\x07u\x02" +
  "\x02P\b\x03\x02\x02\x02QR\x07*\x02\x02R\n\x03\x02\x02\x02ST\x07+\x02\x02" +
  "T\f\x03\x02\x02\x02UV\x07/\x02\x02VW\x07@\x02\x02W\x0E\x03\x02\x02\x02" +
  "XY\x07I\x02\x02YZ\x07G\x02\x02Z[\x07V\x02\x02[\x10\x03\x02\x02\x02\\]" +
  "\x07R\x02\x02]^\x07Q\x02\x02^_\x07U\x02\x02_`\x07V\x02\x02`\x12\x03\x02" +
  "\x02\x02ab\x07R\x02\x02bc\x07W\x02\x02cd\x07V\x02\x02d\x14\x03\x02\x02" +
  "\x02ef\x07F\x02\x02fg\x07G\x02\x02gh\x07N\x02\x02hi\x07G\x02\x02ij\x07" +
  "V\x02\x02jk\x07G\x02\x02k\x16\x03\x02\x02\x02lm\x071\x02\x02m\x18\x03" +
  "\x02\x02\x02no\x07v\x02\x02op\x07{\x02\x02pq\x07r\x02\x02qr\x07g\x02\x02" +
  "r\x1A\x03\x02\x02\x02st\x07?\x02\x02t\x1C\x03\x02\x02\x02uv\x07~\x02\x02" +
  "v\x1E\x03\x02\x02\x02wx\x07]\x02\x02xy\x07_\x02\x02y \x03\x02\x02\x02" +
  "z{\x07C\x02\x02{|\x07t\x02\x02|}\x07t\x02\x02}~\x07c\x02\x02~\x7F\x07" +
  '{\x02\x02\x7F\x80\x07>\x02\x02\x80"\x03\x02\x02\x02\x81\x82\x07@\x02' +
  "\x02\x82$\x03\x02\x02\x02\x83\x84\x07O\x02\x02\x84\x85\x07c\x02\x02\x85" +
  "\x86\x07r\x02\x02\x86\x87\x07>\x02\x02\x87&\x03\x02\x02\x02\x88\x89\x07" +
  "}\x02\x02\x89(\x03\x02\x02\x02\x8A\x8B\x07\x7F\x02\x02\x8B*\x03\x02\x02" +
  "\x02\x8C\x8D\x07A\x02\x02\x8D,\x03\x02\x02\x02\x8E\x8F\x07B\x02\x02\x8F" +
  ".\x03\x02\x02\x02\x90\x91\x07=\x02\x02\x910\x03\x02\x02\x02\x92\x96\t" +
  "\x02\x02\x02\x93\x95\t\x03\x02\x02\x94\x93\x03\x02\x02\x02\x95\x98\x03" +
  "\x02\x02\x02\x96\x94\x03\x02\x02\x02\x96\x97\x03\x02\x02\x02\x972\x03" +
  "\x02\x02\x02\x98\x96\x03\x02\x02\x02\x99\x9B\t\x04\x02\x02\x9A\x99\x03" +
  "\x02\x02\x02\x9B\x9C\x03\x02\x02\x02\x9C\x9A\x03\x02\x02\x02\x9C\x9D\x03" +
  "\x02\x02\x02\x9D4\x03\x02\x02\x02\x9E\x9F\t\x05\x02\x02\x9F6\x03\x02\x02" +
  "\x02\xA0\xA2\t\x06\x02\x02\xA1\xA0\x03\x02\x02\x02\xA2\xA3\x03\x02\x02" +
  "\x02\xA3\xA1\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA5\x03\x02\x02" +
  "\x02\xA5\xA6\b\x1C\x02\x02\xA68\x03\x02\x02\x02\xA7\xA8\x071\x02\x02\xA8" +
  "\xA9\x07,\x02\x02\xA9\xAD\x03\x02\x02\x02\xAA\xAC\v\x02\x02\x02\xAB\xAA" +
  "\x03\x02\x02\x02\xAC\xAF\x03\x02\x02\x02\xAD\xAE\x03\x02\x02\x02\xAD\xAB" +
  "\x03\x02\x02\x02\xAE\xB0\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02\xB0\xB1" +
  "\x07,\x02\x02\xB1\xB2\x071\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB4\b\x1D" +
  "\x03\x02\xB4:\x03\x02\x02\x02\xB5\xB6\x071\x02\x02\xB6\xB7\x071\x02\x02" +
  "\xB7\xBB\x03\x02\x02\x02\xB8\xBA\n\x05\x02\x02\xB9\xB8\x03\x02\x02\x02" +
  "\xBA\xBD\x03\x02\x02\x02\xBB\xB9\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02" +
  "\xBC\xBE\x03\x02\x02\x02\xBD\xBB\x03\x02\x02\x02\xBE\xBF\b\x1E\x03\x02" +
  "\xBF<\x03\x02\x02\x02\b\x02\x96\x9C\xA3\xAD\xBB\x04\b\x02\x02\x02\x03" +
  "\x02";
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!ApiDefLexer.__ATN) {
      ApiDefLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(ApiDefLexer._serializedATN),
      );
    }

    return ApiDefLexer.__ATN;
  }
}
