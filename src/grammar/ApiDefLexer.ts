// Generated from src/grammar/ApiDef.g4 by ANTLR 4.6-SNAPSHOT

import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

export class ApiDefLexer extends Lexer {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly T__2 = 3;
  public static readonly T__3 = 4;
  public static readonly T__4 = 5;
  public static readonly T__5 = 6;
  public static readonly T__6 = 7;
  public static readonly T__7 = 8;
  public static readonly T__8 = 9;
  public static readonly T__9 = 10;
  public static readonly T__10 = 11;
  public static readonly T__11 = 12;
  public static readonly T__12 = 13;
  public static readonly T__13 = 14;
  public static readonly T__14 = 15;
  public static readonly T__15 = 16;
  public static readonly T__16 = 17;
  public static readonly NAME = 18;
  public static readonly LINEBREAK = 19;
  public static readonly WHITESPACE = 20;
  public static readonly BLOCK_COMMENT = 21;
  public static readonly LINE_COMMENT = 22;
  public static readonly modeNames: string[] = ["DEFAULT_MODE"];

  public static readonly ruleNames: string[] = [
    "T__0",
    "T__1",
    "T__2",
    "T__3",
    "T__4",
    "T__5",
    "T__6",
    "T__7",
    "T__8",
    "T__9",
    "T__10",
    "T__11",
    "T__12",
    "T__13",
    "T__14",
    "T__15",
    "T__16",
    "NAME",
    "LINEBREAK",
    "WHITESPACE",
    "BLOCK_COMMENT",
    "LINE_COMMENT",
  ];

  private static readonly _LITERAL_NAMES: (string | undefined)[] = [
    undefined,
    "'endpoint'",
    "':'",
    "'->'",
    "'GET'",
    "'POST'",
    "'PUT'",
    "'DELETE'",
    "'/'",
    "'type'",
    "'='",
    "'|'",
    "'[]'",
    "'{'",
    "'}'",
    "'?'",
    "'@'",
    "';'",
  ];
  private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "NAME",
    "LINEBREAK",
    "WHITESPACE",
    "BLOCK_COMMENT",
    "LINE_COMMENT",
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    ApiDefLexer._LITERAL_NAMES,
    ApiDefLexer._SYMBOLIC_NAMES,
    [],
  );

  @Override
  @NotNull
  public get vocabulary(): Vocabulary {
    return ApiDefLexer.VOCABULARY;
  }

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(ApiDefLexer._ATN, this);
  }

  @Override
  public get grammarFileName(): string {
    return "ApiDef.g4";
  }

  @Override
  public get ruleNames(): string[] {
    return ApiDefLexer.ruleNames;
  }

  @Override
  public get serializedATN(): string {
    return ApiDefLexer._serializedATN;
  }

  @Override
  public get modeNames(): string[] {
    return ApiDefLexer.modeNames;
  }

  public static readonly _serializedATN: string = "\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x18\x92\b\x01" +
    "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
    "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
    "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
    "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
    "\x17\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
    "\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
    "\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03" +
    "\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n" +
    "\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03" +
    "\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03" +
    "\x13\x03\x13\x07\x13l\n\x13\f\x13\x0E\x13o\v\x13\x03\x14\x03\x14\x03\x15" +
    "\x06\x15t\n\x15\r\x15\x0E\x15u\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16" +
    "\x03\x16\x07\x16~\n\x16\f\x16\x0E\x16\x81\v\x16\x03\x16\x03\x16\x03\x16" +
    "\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x07\x17\x8C\n\x17\f\x17" +
    "\x0E\x17\x8F\v\x17\x03\x17\x03\x17\x03\x7F\x02\x02\x18\x03\x02\x03\x05" +
    "\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
    "\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02" +
    "\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18\x03" +
    "\x02\x06\x04\x02C\\c|\x05\x022;C\\c|\x04\x02\f\f\x0F\x0F\x05\x02\v\v\x0E" +
    '\x0E""\x95\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03' +
    "\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02" +
    "\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
    "\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02" +
    "\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02" +
    "\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02" +
    "\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-" +
    "\x03\x02\x02\x02\x03/\x03\x02\x02\x02\x058\x03\x02\x02\x02\x07:\x03\x02" +
    "\x02\x02\t=\x03\x02\x02\x02\vA\x03\x02\x02\x02\rF\x03\x02\x02\x02\x0F" +
    "J\x03\x02\x02\x02\x11Q\x03\x02\x02\x02\x13S\x03\x02\x02\x02\x15X\x03\x02" +
    "\x02\x02\x17Z\x03\x02\x02\x02\x19\\\x03\x02\x02\x02\x1B_\x03\x02\x02\x02" +
    "\x1Da\x03\x02\x02\x02\x1Fc\x03\x02\x02\x02!e\x03\x02\x02\x02#g\x03\x02" +
    "\x02\x02%i\x03\x02\x02\x02'p\x03\x02\x02\x02)s\x03\x02\x02\x02+y\x03" +
    "\x02\x02\x02-\x87\x03\x02\x02\x02/0\x07g\x02\x0201\x07p\x02\x0212\x07" +
    "f\x02\x0223\x07r\x02\x0234\x07q\x02\x0245\x07k\x02\x0256\x07p\x02\x02" +
    "67\x07v\x02\x027\x04\x03\x02\x02\x0289\x07<\x02\x029\x06\x03\x02\x02\x02" +
    ":;\x07/\x02\x02;<\x07@\x02\x02<\b\x03\x02\x02\x02=>\x07I\x02\x02>?\x07" +
    "G\x02\x02?@\x07V\x02\x02@\n\x03\x02\x02\x02AB\x07R\x02\x02BC\x07Q\x02" +
    "\x02CD\x07U\x02\x02DE\x07V\x02\x02E\f\x03\x02\x02\x02FG\x07R\x02\x02G" +
    "H\x07W\x02\x02HI\x07V\x02\x02I\x0E\x03\x02\x02\x02JK\x07F\x02\x02KL\x07" +
    "G\x02\x02LM\x07N\x02\x02MN\x07G\x02\x02NO\x07V\x02\x02OP\x07G\x02\x02" +
    "P\x10\x03\x02\x02\x02QR\x071\x02\x02R\x12\x03\x02\x02\x02ST\x07v\x02\x02" +
    "TU\x07{\x02\x02UV\x07r\x02\x02VW\x07g\x02\x02W\x14\x03\x02\x02\x02XY\x07" +
    "?\x02\x02Y\x16\x03\x02\x02\x02Z[\x07~\x02\x02[\x18\x03\x02\x02\x02\\]" +
    "\x07]\x02\x02]^\x07_\x02\x02^\x1A\x03\x02\x02\x02_`\x07}\x02\x02`\x1C" +
    "\x03\x02\x02\x02ab\x07\x7F\x02\x02b\x1E\x03\x02\x02\x02cd\x07A\x02\x02" +
    'd \x03\x02\x02\x02ef\x07B\x02\x02f"\x03\x02\x02\x02gh\x07=\x02\x02h$' +
    "\x03\x02\x02\x02im\t\x02\x02\x02jl\t\x03\x02\x02kj\x03\x02\x02\x02lo\x03" +
    "\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02n&\x03\x02\x02\x02om\x03" +
    "\x02\x02\x02pq\t\x04\x02\x02q(\x03\x02\x02\x02rt\t\x05\x02\x02sr\x03\x02" +
    "\x02\x02tu\x03\x02\x02\x02us\x03\x02\x02\x02uv\x03\x02\x02\x02vw\x03\x02" +
    "\x02\x02wx\b\x15\x02\x02x*\x03\x02\x02\x02yz\x071\x02\x02z{\x07,\x02\x02" +
    "{\x7F\x03\x02\x02\x02|~\v\x02\x02\x02}|\x03\x02\x02\x02~\x81\x03\x02\x02" +
    "\x02\x7F\x80\x03\x02\x02\x02\x7F}\x03\x02\x02\x02\x80\x82\x03\x02\x02" +
    "\x02\x81\x7F\x03\x02\x02\x02\x82\x83\x07,\x02\x02\x83\x84\x071\x02\x02" +
    "\x84\x85\x03\x02\x02\x02\x85\x86\b\x16\x03\x02\x86,\x03\x02\x02\x02\x87" +
    "\x88\x071\x02\x02\x88\x89\x071\x02\x02\x89\x8D\x03\x02\x02\x02\x8A\x8C" +
    "\n\x04\x02\x02\x8B\x8A\x03\x02\x02\x02\x8C\x8F\x03\x02\x02\x02\x8D\x8B" +
    "\x03\x02\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E\x90\x03\x02\x02\x02\x8F\x8D" +
    "\x03\x02\x02\x02\x90\x91\b\x17\x03\x02\x91.\x03\x02\x02\x02\x07\x02mu" +
    "\x7F\x8D\x04\b\x02\x02\x02\x03\x02";
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!ApiDefLexer.__ATN) {
      ApiDefLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(ApiDefLexer._serializedATN),
      );
    }

    return ApiDefLexer.__ATN;
  }
}
